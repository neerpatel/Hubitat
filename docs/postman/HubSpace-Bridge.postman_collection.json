{
  "info": {
    "name": "HubSpace Bridge",
    "_postman_id": "7f4e2c18-7a9a-4d8b-9f4a-bridge-hubspace",
    "description": "Postman collection for the local HubSpace Bridge API (Node). Endpoints: /login, /devices, /state/:id, /command/:id, /health. Start the server (default :3000), run Login, then use Devices/State/Command with the saved session.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    { "key": "base_url", "value": "http://localhost:3000" },
    { "key": "session", "value": "" },
    { "key": "device_id", "value": "" },
    { "key": "account_id", "value": "" },
    { "key": "pkce_verifier", "value": "" },
    { "key": "pkce_challenge", "value": "" }
  ],
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Generate PKCE",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/health",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "health"
              ]
            },
            "description": "Generates a new PKCE verifier and challenge and saves them as collection variables (pkce_verifier, pkce_challenge)."
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "function base64UrlEncode(wordArray) {",
                  "  return CryptoJS.enc.Base64.stringify(wordArray)",
                  "    .replace(/=+$/,'')",
                  "    .replace(/\\+/g,'-')",
                  "    .replace(/\\//g,'_');",
                  "}",
                  "const rnd = CryptoJS.lib.WordArray.random(40); // 40 bytes",
                  "let verifier = base64UrlEncode(rnd).replace(/[^a-zA-Z0-9_-]/g, '');",
                  "const challenge = base64UrlEncode(CryptoJS.SHA256(verifier));",
                  "pm.collectionVariables.set('pkce_verifier', verifier);",
                  "pm.collectionVariables.set('pkce_challenge', challenge);",
                  "console.log('Generated PKCE', { verifier, challenge });"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('PKCE variables set', function () {",
                  "  pm.expect(pm.collectionVariables.get('pkce_verifier')).to.be.a('string').and.to.not.be.empty;",
                  "  pm.expect(pm.collectionVariables.get('pkce_challenge')).to.be.a('string').and.to.not.be.empty;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"your@email.com\",\n  \"password\": \"your-password\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/login",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "login"
              ]
            },
            "description": "Authenticates with HubSpace and returns a sessionId. The test script saves session/account to collection variables."
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (!pm.collectionVariables.get('pkce_verifier') || !pm.collectionVariables.get('pkce_challenge')) {",
                  "  function base64UrlEncode(wordArray) {",
                  "    return CryptoJS.enc.Base64.stringify(wordArray)",
                  "      .replace(/=+$/,'')",
                  "      .replace(/\\+/g,'-')",
                  "      .replace(/\\//g,'_');",
                  "  }",
                  "  const rnd = CryptoJS.lib.WordArray.random(40);",
                  "  let verifier = base64UrlEncode(rnd).replace(/[^a-zA-Z0-9_-]/g, '');",
                  "  const challenge = base64UrlEncode(CryptoJS.SHA256(verifier));",
                  "  pm.collectionVariables.set('pkce_verifier', verifier);",
                  "  pm.collectionVariables.set('pkce_challenge', challenge);",
                  "  console.log('Generated PKCE (auto)', { verifier, challenge });",
                  "} else {",
                  "  console.log('Using existing PKCE vars');",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', function () { pm.response.to.have.status(200); });",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "if (json.sessionId) {",
                  "  pm.collectionVariables.set('session', json.sessionId);",
                  "  pm.environment && pm.environment.set && pm.environment.set('session', json.sessionId);",
                  "}",
                  "if (json.accountId) {",
                  "  pm.collectionVariables.set('account_id', json.accountId);",
                  "  pm.environment && pm.environment.set && pm.environment.set('account_id', json.accountId);",
                  "}",
                  "console.log('session=', pm.collectionVariables.get('session'), 'account=', pm.collectionVariables.get('account_id'));"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Devices",
      "item": [
        {
          "name": "List Devices",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/devices?session={{session}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "devices"
              ],
              "query": [
                { "key": "session", "value": "{{session}}" }
              ]
            },
            "description": "Returns an array of minimal device objects: id, typeId, device_class, friendlyName, states. Requires a valid session from Login."
          }
        }
      ]
    },
    {
      "name": "State",
      "item": [
        {
          "name": "Get Device State",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/state/{{device_id}}?session={{session}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "state",
                "{{device_id}}"
              ],
              "query": [
                { "key": "session", "value": "{{session}}" }
              ]
            },
            "description": "Gets raw state for a specific device by id. Set collection variable device_id from a List Devices result."
          }
        }
      ]
    },
    {
      "name": "Command",
      "item": [
        {
          "name": "Send Command",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"values\": [\n    { \"functionClass\": \"power\", \"value\": \"on\" }\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/command/{{device_id}}?session={{session}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "command",
                "{{device_id}}"
              ],
              "query": [
                { "key": "session", "value": "{{session}}" }
              ]
            },
            "description": "Sends one or more function values to a device. Common examples: power on/off; brightness 0-100; color-temperature mireds or kelvin depending on device."
          },
          "response": [
            {
              "name": "Example: Turn On",
              "originalRequest": {
                "method": "POST",
                "header": [ { "key": "Content-Type", "value": "application/json" } ],
                "body": { "mode": "raw", "raw": "{\n  \"values\": [\n    { \"functionClass\": \"power\", \"value\": \"on\" }\n  ]\n}" },
                "url": { "raw": "{{base_url}}/command/{{device_id}}?session={{session}}" }
              }
            },
            {
              "name": "Example: Set Brightness",
              "originalRequest": {
                "method": "POST",
                "header": [ { "key": "Content-Type", "value": "application/json" } ],
                "body": { "mode": "raw", "raw": "{\n  \"values\": [\n    { \"functionClass\": \"brightness\", \"value\": 50 }\n  ]\n}" },
                "url": { "raw": "{{base_url}}/command/{{device_id}}?session={{session}}" }
              }
            },
            {
              "name": "Example: Color Temperature",
              "originalRequest": {
                "method": "POST",
                "header": [ { "key": "Content-Type", "value": "application/json" } ],
                "body": { "mode": "raw", "raw": "{\n  \"values\": [\n    { \"functionClass\": \"color-temperature\", \"value\": 2700 }\n  ]\n}" },
                "url": { "raw": "{{base_url}}/command/{{device_id}}?session={{session}}" }
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Health",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/health",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "health"
              ]
            },
            "description": "Basic liveness and session count check."
          }
        }
      ]
    }
  ]
}
